{"ast":null,"code":"var _jsxFileName = \"/Users/sars6388/twitter-clone-frontend/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react'; // Reactとそのフックをインポート\nimport './styles/index.css';\nimport './styles/App.css'; // アプリケーションのスタイルシートをインポート\nimport axios from 'axios'; // HTTPクライアントaxiosをインポート\nimport { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom'; // ルーティングに必要なコンポーネントをインポート\nimport LoginForm from './components/Auth/LoginForm'; // ログインフォームコンポーネントをインポート\nimport Dashboard from './components/Dashboard/LoginUserName'; // ダッシュボードコンポーネントをインポート\n\n// axiosのデフォルト設定をグローバルに設定\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.withCredentials = true;\n\n// Appコンポーネントのプロパティの型定義\n\nconst App = props => {\n  _s();\n  // ユーザー状態を管理するステート\n  const [user, setUser] = useState(null);\n\n  // ログイン成功時のハンドラ\n  const handleLoginSuccess = userData => {\n    // ユーザーデータをステートにセット\n    setUser(userData);\n    // セッションストレージに保存\n    sessionStorage.setItem('user', JSON.stringify(userData));\n  };\n\n  // ログアウト処理\n  const handleLogout = async () => {\n    try {\n      // バックエンドにログアウトリクエストを送信\n      const response = await axios.post('/logout', {}, {\n        withCredentials: true\n      });\n      // レスポンスが成功した場合のみ以下の処理を行う\n      if (response.status === 200) {\n        console.log('ログアウト成功: セッションストレージをクリアします');\n        // セッションストレージをクリア\n        sessionStorage.clear();\n        console.log('セッションストレージをクリアしました: ユーザー状態をリセットします');\n        // ユーザー状態をリセット\n        setUser(null);\n        console.log('ユーザー状態をリセットしました: ページをリロードします');\n        // ページをリロード\n        window.location.reload();\n      } else {\n        console.error('ログアウトに失敗しました:', response.statusText);\n      }\n    } catch (error) {\n      // ログアウトリクエスト失敗時のエラーハンドリング\n      console.error('ログアウトエラー:', error);\n    }\n  };\n\n  // コンポーネントマウント時の副作用\n  useEffect(() => {\n    // セッションストレージからユーザーデータを取得\n    const storedUser = sessionStorage.getItem('user');\n    if (storedUser) {\n      // ユーザーデータをステートにセット\n      setUser(JSON.parse(storedUser));\n    } else {\n      // セッションAPIにリクエスト\n      axios.get('/session').then(response => {\n        // ユーザーデータが存在する場合\n        if (response.data.user) {\n          // ユーザーデータをステートにセット\n          setUser(response.data.user);\n          // セッションストレージに保存\n          sessionStorage.setItem('user', JSON.stringify(response.data.user));\n        } else {\n          // ユーザーデータが存在しない場合\n          setUser(null);\n        }\n      }).catch(error => {\n        // エラーログを出力\n        console.error('セッション情報取得エラー:', error);\n        // エラー時にユーザー状態をリセット\n        setUser(null);\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: user ? /*#__PURE__*/_jsxDEV(Navigate, {\n          replace: true,\n          to: \"/dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 41\n        }, this) : /*#__PURE__*/_jsxDEV(LoginForm, {\n          onLogin: handleLoginSuccess\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 80\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/dashboard\",\n        element: user ? /*#__PURE__*/_jsxDEV(Dashboard, {\n          user: user,\n          onLogout: handleLogout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 50\n        }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n          replace: true,\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 102\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n// Appコンポーネントをエクスポート\n_s(App, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","BrowserRouter","Router","Route","Routes","Navigate","LoginForm","Dashboard","jsxDEV","_jsxDEV","defaults","withCredentials","App","props","_s","user","setUser","handleLoginSuccess","userData","sessionStorage","setItem","JSON","stringify","handleLogout","response","post","status","console","log","clear","window","location","reload","error","statusText","storedUser","getItem","parse","get","then","data","catch","children","path","element","replace","to","fileName","_jsxFileName","lineNumber","columnNumber","onLogin","onLogout","_c","$RefreshReg$"],"sources":["/Users/sars6388/twitter-clone-frontend/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, FC } from 'react';                                  // Reactとそのフックをインポート\nimport './styles/index.css';\nimport './styles/App.css';                      // アプリケーションのスタイルシートをインポート\nimport axios from 'axios';                                                           // HTTPクライアントaxiosをインポート\nimport { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom'; // ルーティングに必要なコンポーネントをインポート\nimport LoginForm from './components/Auth/LoginForm';                                // ログインフォームコンポーネントをインポート\nimport Dashboard from './components/Dashboard/LoginUserName';                        // ダッシュボードコンポーネントをインポート\n\n// axiosのデフォルト設定をグローバルに設定\naxios.defaults.withCredentials = true;\n\n// Appコンポーネントのプロパティの型定義\ninterface AppProps {}\n\nconst App: FC<AppProps> = (props) => {\n  // ユーザー状態を管理するステート\n  const [user, setUser] = useState<any>(null);\n\n  // ログイン成功時のハンドラ\n  const handleLoginSuccess = (userData: any) => {\n    // ユーザーデータをステートにセット\n    setUser(userData);\n    // セッションストレージに保存\n    sessionStorage.setItem('user', JSON.stringify(userData));\n  };\n\n  // ログアウト処理\n  const handleLogout = async () => {\n    try {\n      // バックエンドにログアウトリクエストを送信\n      const response = await axios.post('/logout', {}, {\n        withCredentials: true\n      });\n      // レスポンスが成功した場合のみ以下の処理を行う\n      if (response.status === 200) {\n        console.log('ログアウト成功: セッションストレージをクリアします');\n        // セッションストレージをクリア\n        sessionStorage.clear();\n        console.log('セッションストレージをクリアしました: ユーザー状態をリセットします');\n        // ユーザー状態をリセット\n        setUser(null);\n        console.log('ユーザー状態をリセットしました: ページをリロードします');\n        // ページをリロード\n        window.location.reload();\n      } else {\n        console.error('ログアウトに失敗しました:', response.statusText);\n      }\n    } catch (error) {\n      // ログアウトリクエスト失敗時のエラーハンドリング\n      console.error('ログアウトエラー:', error);\n    }\n  };\n\n  // コンポーネントマウント時の副作用\n  useEffect(() => {\n    // セッションストレージからユーザーデータを取得\n    const storedUser = sessionStorage.getItem('user');\n    if (storedUser) {\n      // ユーザーデータをステートにセット\n      setUser(JSON.parse(storedUser));\n    } else {\n      // セッションAPIにリクエスト\n      axios.get('/session')\n        .then(response => {\n          // ユーザーデータが存在する場合\n          if (response.data.user) {\n            // ユーザーデータをステートにセット\n            setUser(response.data.user);\n            // セッションストレージに保存\n            sessionStorage.setItem('user', JSON.stringify(response.data.user));\n          } else {\n            // ユーザーデータが存在しない場合\n            setUser(null);\n          }\n        })\n        .catch(error => {\n          // エラーログを出力\n          console.error('セッション情報取得エラー:', error);\n          // エラー時にユーザー状態をリセット\n          setUser(null);\n        });\n    }\n\n  }, []);\n\n  return (\n    <Router> \n      <Routes>\n        {/* ルートパスのルート */}\n        <Route path=\"/\" element={user ? <Navigate replace to=\"/dashboard\" /> : <LoginForm onLogin={handleLoginSuccess} />} />\n        {/* ダッシュボードパスのルート */}\n        <Route path=\"/dashboard\" element={user ? <Dashboard user={user} onLogout={handleLogout} /> : <Navigate replace to=\"/\" />} />\n      </Routes>\n    </Router>\n  );\n};\n\n// Appコンポーネントをエクスポート\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}